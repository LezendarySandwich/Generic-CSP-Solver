{"ast":null,"code":"var _jsxFileName = \"/home/chaos/Desktop/generic-constraint-web/src/components/Forms.jsx\";\nimport { withFormik, Field, Form } from 'formik';\nimport OutForm from './OutForm';\nimport * as Yup from 'yup';\nimport ReactLoading from 'react-loading';\nimport './../styles/formStyles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TemplateForms({\n  values,\n  touched,\n  isSubmitting,\n  errors\n}) {\n  const constraintTextHolder = \"Constraints \\ne.g.\\nvalue[1] == value[2]\\nvalue[2] + value[3] == 4\";\n  const constraintPythonHolder = `Constraints \\ne.g.\\nconstraint = \"\"\\n for i in range(5):\\n    constraint += f'value[i] != 1\\nreturn constraint`;\n  const domainTextHolder = \"Domain\\ne.g.\\nvalue[1] = [1,2,3]\\nvalue[2] = [2,4,1]\";\n  const domainPythonHolder = `Domain\\ne.g.\\ndomains = \"\"\\nfor i in range(3):\\n    domains += f'value[{i + 1}] = [1,2,3]\\nreturn domains`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-container\",\n    children: [/*#__PURE__*/_jsxDEV(OutForm, {\n      value: values.outState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactLoading, {\n      type: \"bars\",\n      className: \"centerAnimation\",\n      color: \"#252525\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      className: \"formStyle\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        name: \"Algo\",\n        className: \"Algo\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          component: \"select\",\n          name: \"algorithm\",\n          className: \"dropDown\",\n          children: /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"solve_dfs\",\n            className: styles.dropDownContent,\n            children: \"Depth First Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 17\n        }, this), \"Select an Algorithm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"variables\",\n        placeholder: \"Variables\",\n        className: \"variable\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        component: \"textarea\",\n        name: \"domain\",\n        placeholder: values.format === 'text' ? domainTextHolder : domainPythonHolder,\n        className: \"domain\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        component: \"textarea\",\n        name: \"constraints\",\n        placeholder: values.format === 'text' ? constraintTextHolder : constraintPythonHolder,\n        className: \"constraint\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isSubmitting,\n        type: \"submit\",\n        className: \"btn\",\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n}\n\n_c = TemplateForms;\nconst Forms = withFormik({\n  mapPropsToValues() {\n    return {\n      variables: '',\n      domain: '',\n      constraints: '',\n      algorithm: 'solve_dfs',\n      format: 'text',\n      outState: ''\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    variables: Yup.string().matches(/^\\d+$/, '*Must be an integer').required('*Required'),\n    constraints: Yup.string()\n  }),\n\n  async handleSubmit(values, {\n    setSubmitting,\n    setFieldValue\n  }) {\n    setSubmitting(true);\n    let response = await fetch(`/api/${values.variables}/${values.algorithm}/${values.format}/?constraint=${encodeURIComponent(values.constraints)}&domain=${encodeURIComponent(values.domain)}`);\n\n    if (response.ok) {\n      response = await response.json();\n\n      if (response['timed_out']) {\n        setFieldValue('outState', 'Timed out...');\n      } else if (!response['done']) {\n        setFieldValue('outState', 'No solution exists...');\n      } else {\n        setFieldValue('outState', response['solution']);\n      }\n    } else {\n      response = await response.text();\n      setFieldValue('outState', response);\n    }\n\n    setSubmitting(false);\n  }\n\n})(TemplateForms);\nexport default Forms;\n\nvar _c;\n\n$RefreshReg$(_c, \"TemplateForms\");","map":{"version":3,"sources":["/home/chaos/Desktop/generic-constraint-web/src/components/Forms.jsx"],"names":["withFormik","Field","Form","OutForm","Yup","ReactLoading","TemplateForms","values","touched","isSubmitting","errors","constraintTextHolder","constraintPythonHolder","domainTextHolder","domainPythonHolder","outState","styles","dropDownContent","format","Forms","mapPropsToValues","variables","domain","constraints","algorithm","validationSchema","object","shape","string","matches","required","handleSubmit","setSubmitting","setFieldValue","response","fetch","encodeURIComponent","ok","json","text"],"mappings":"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","sourcesContent":["import { withFormik, Field, Form } from 'formik'\nimport OutForm from './OutForm'\nimport * as Yup from 'yup'\nimport ReactLoading from 'react-loading'\nimport './../styles/formStyles.css'\n\nfunction TemplateForms({values, touched, isSubmitting, errors}){\n    const constraintTextHolder = \"Constraints \\ne.g.\\nvalue[1] == value[2]\\nvalue[2] + value[3] == 4\"\n    const constraintPythonHolder = `Constraints \\ne.g.\\nconstraint = \"\"\\n for i in range(5):\\n    constraint += f'value[i] != 1\\nreturn constraint`\n    const domainTextHolder = \"Domain\\ne.g.\\nvalue[1] = [1,2,3]\\nvalue[2] = [2,4,1]\"\n    const domainPythonHolder = `Domain\\ne.g.\\ndomains = \"\"\\nfor i in range(3):\\n    domains += f'value[{i + 1}] = [1,2,3]\\nreturn domains`\n\n    return (\n        <div className=\"my-container\">\n            <OutForm value={values.outState}/>\n            {<ReactLoading type={\"bars\"} className=\"centerAnimation\" color=\"#252525\"/>}\n            <Form className=\"formStyle\">\n            {/* isSubmitting &&  */}\n                <label name=\"Algo\" className = \"Algo\" >\n                <Field component=\"select\" name=\"algorithm\" className=\"dropDown\">\n                    <option value=\"solve_dfs\" className={styles.dropDownContent}>Depth First Search</option>\n                </Field>\n                Select an Algorithm\n                </label>\n                {/* <br/>\n                <Field component=\"select\" name=\"format\" className={styles.dropDown}>\n                    <option value=\"text\">Text</option>\n                    <option value=\"python\">Python</option>\n                </Field>\n                <br/>\n                {touched.variables && errors.variables && <p className={styles.error}>{errors.variables}</p>} */}\n                <Field name=\"variables\" placeholder=\"Variables\" className=\"variable\"/>\n                <br/> \n                <Field component=\"textarea\" name=\"domain\" placeholder={values.format === 'text'? domainTextHolder: domainPythonHolder} className=\"domain\"/>\n                <br/>\n                <Field component=\"textarea\" name=\"constraints\" placeholder={values.format === 'text'? constraintTextHolder: constraintPythonHolder} className=\"constraint\"></Field>\n                <br/>\n                <button disabled={isSubmitting} type = \"submit\" className=\"btn\">Run</button>\n            </Form>\n        </div>\n        \n    )\n}\n\nconst Forms = withFormik({\n    mapPropsToValues(){\n        return {\n            variables: '',\n            domain:'',\n            constraints: '',\n            algorithm: 'solve_dfs',\n            format: 'text',\n            outState: '',\n        }\n    },\n    validationSchema: Yup.object().shape({\n        variables: Yup.string().matches(/^\\d+$/, '*Must be an integer').required('*Required'),\n        constraints: Yup.string(),\n    }),\n    async handleSubmit(values, {setSubmitting, setFieldValue}){\n        setSubmitting(true)\n        let response = await fetch(`/api/${values.variables}/${values.algorithm}/${values.format}/?constraint=${encodeURIComponent(values.constraints)}&domain=${encodeURIComponent(values.domain)}`)\n        if(response.ok){\n            response = await response.json()\n            if(response['timed_out']){\n                setFieldValue('outState', 'Timed out...')\n            }\n            else if(!response['done']){\n                setFieldValue('outState', 'No solution exists...')\n            }\n            else {\n                setFieldValue('outState', response['solution'])\n            }\n        }\n        else {\n            response = await response.text()\n            setFieldValue('outState', response)\n        }\n        setSubmitting(false)\n    }\n})(TemplateForms)\n\nexport default Forms"]},"metadata":{},"sourceType":"module"}